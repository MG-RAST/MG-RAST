#!/usr/bin/env python

import os, sys, time
import urllib, urllib2, json
import optparse
from collections import defaultdict

__doc__ = """Script to decorate MG-RAST similarity file (blat result) with annotations"""

MGRAST_URL = 'http://api.metagenomics.anl.gov'
ANN_API    = MGRAST_URL+'/annotations'
ANN_TYPE   = []
ANN_SOURCE = []
SOURCES    = ""
DELAY = 30

def errorMsg(err, exit=0):
    sys.stderr.write("[error] "+err+"\n")
    if exit:
        os._exit(1)

def obj_from_url(url):
    try:
        req = urllib2.Request(url, headers={'Accept': 'application/json'})
        res = urllib2.urlopen(req)
    except urllib2.HTTPError:
        errorMsg("MG-RAST API inaccessable: can not connect to: %s"%url, 1)
    if not res:
        errorMsg("MG-RAST API inaccessable: can not connect to: %s"%url, 1)
    obj = json.loads(res.read())
    if not (obj and isinstance(obj, dict)):
        errorMsg("return data invalid format:\n%s"%res.read(), 1)
    if obj.keys() == 0:
        errorMsg("no data available: %s"%url, 1)
    if 'ERROR' in obj:
        errorMsg(obj['ERROR']+": "+url, 1)
    return obj
    
def set_ann_info():
    global ANN_TYPE, ANN_SOURCE, SOURCES
    ainfo = obj_from_url(ANN_API)
    for req in ainfo['requests']:
        if req['name'] == 'instance':
            ANN_TYPE   = [x[0] for x in req['parameters']['options']['type'][1]]
            ANN_SOURCE = [x[0] for x in req['parameters']['options']['source'][1]]
            SOURCES    = "\n".join(["%s\t%s"%(x[0], x[1]) for x in req['parameters']['options']['source'][1]])

def get_annotations(mgid, atype, source, wkey=None):
    url = ANN_API+'/mgm'+mgid+'?asynchronous=1&type='+atype+'&source='+source
    if wkey:
        url += '&auth='+wkey
    submit = obj_from_url(url)
    if not (('status' in submit) and (submit['status'] == 'Submitted') and ('url' in submit)):
        errorMsg("return data invalid format:\n%s"%json.dumps(submit), 1)
    result = obj_from_url(submit['url'])
    while result['status'] != 'done':
        time.sleep(DELAY)
        result = obj_from_url(submit['url'])
    return result['data']['data']

usage   = "usage: %prog [options] -m metagenome_id -i input\n" + __doc__
version = "%prog 1.0"

def main(args):
    class MyParser(optparse.OptionParser):
        def format_epilog(self, formatter):
            return self.epilog
    
    set_ann_info()
    desc = "\nAvailable Types:\n"+", ".join(ANN_TYPE)+"\n\nAvailable Sources:\n"+SOURCES+"\n"
    parser = MyParser(usage=usage, version=version, epilog=desc)
    parser.add_option("-i", "--input", dest="input", default=None, help="Path of input similarity file")
    parser.add_option("-o", "--output", dest="output", default=None, help="Path of output annotated file")
    parser.add_option("-m", "--metagenome_id", dest="mgid", default=None, help="MG-RAST metagenome ID of input file")
    parser.add_option("-k", "--key", dest="key", default=None, help="MG-RAST webkey for API access")
    parser.add_option("-t", "--type", dest="atype", default='organism', help="Annotation type to retrieve, default 'organism'")
    parser.add_option("-s", "--source", dest="source", default='RefSeq', help="Annotation source to use for lookup, default 'RefSeq'")

    # test input
    (opts, args) = parser.parse_args()
    if opts.atype not in ANN_TYPE:
        parser.error("[error] invalid annotation type. Use one of: "+', '.join(ANN_TYPE))
    if opts.source not in ANN_SOURCE:
        parser.error("[error] invalid annotation type. Use one of:\n"+SOURCES)
    if not opts.mgid:
        parser.error("[error] missing MG-RAST metagenome ID")
    if not (opts.input and os.path.isfile(opts.input)):
        parser.error("[error] input similarity file is missing")
    if not opts.output:
        parser.error("[error] output similarity file is missing")
    opts.mgid = opts.mgid.lstrip('mgm')
    
    # get annotation data from api
    mmap = defaultdict(list)
    data = get_annotations(opts.mgid, opts.atype, opts.source, opts.key)
    for annot, md5s in data.iteritems():
        for m in md5s:
            mmap[m].append(annot)
    
    # decorate similarity file with annotations
    ifile = open(opts.input, 'r')
    ofile = open(opts.output, 'w')
    for line in ifile:
        parts = line.strip().split("\t")
        if parts[1] in mmap:
            for annot in mmap[parts[1]]:
                ofile.write("\t".join([parts[0], parts[1], annot])+"\t"+"\t".join(parts[2:])+"\n")
    ifile.close()
    ofile.close()

if __name__ == "__main__":
    sys.exit(main(sys.argv))
