package resources::inbox;

use strict;
use warnings;
no warnings('once');

use POSIX qw(strftime);
use HTTP::Request::StreamingUpload;
use HTTP::Headers;
use LWP::UserAgent;
use Data::Dumper;
use Conf;
use Template;
use parent qw(resources::resource);

# Override parent constructor
sub new {
    my ($class, @args) = @_;

    # Call the constructor of the parent class
    my $self = $class->SUPER::new(@args);
    
    # Add name
    $self->{name} = "inbox";
    return $self;
}

# resource is called without any parameters
# this method must return a description of the resource
sub info {
    my ($self) = @_;
    my $content = { 'name' => $self->name,
                    'url' => $self->cgi->url."/".$self->name,
                    'description' => "inbox receives user inbox data upload, requires authentication, see http://blog.metagenomics.anl.gov/mg-rast-v3-2-faq/#api_submission for details",
                    'type' => 'object',
                    'documentation' => $self->cgi->url.'/api.html#'.$self->name,
                    'requests' => [ { 'name'        => "info",
                                      'request'     => $self->cgi->url."/".$self->name,
                                      'description' => "Returns description of parameters and attributes.",
                                      'method'      => "GET",
                                      'type'        => "synchronous",  
                                      'attributes'  => "self",
                                      'parameters'  => { 'options'  => {},
                                                         'required' => {},
                                                         'body'     => {} } },
                                    { 'name'        => "view",
                                      'request'     => $self->cgi->url."/".$self->name,
                                      'description' => "lists the contents of the user inbox",
                                      'example'     => [ 'curl -X GET -H "auth: auth_key" "'.$self->cgi->url."/".$self->name.'"',
                  			                             'lists the contents of the user inbox, auth is required' ],
                                      'method'      => "GET",
                                      'type'        => "synchronous",  
                                      'attributes'  => { 'id'        => [ 'string', "user id" ],
                                                         'user'      => [ 'string', "user name" ],
                                                         'timestamp' => [ 'string', "timestamp for return of this query" ],
                                                         'files'     => [ 'list', [ 'object', [ { 'filename'  => [ 'string', "path of file from within user inbox" ],
                                                                                                  'filesize'  => [ 'string', "disk size of file in bytes" ],
                                                                                                  'checksum'  => [ 'string', "md5 checksum of file"],
                                                                                                  'timestamp' => [ 'string', "timestamp of file" ]
                                                                                                 }, "list of file objects"] ] ],
                                                         'url'       => [ 'uri', "resource location of this object instance" ] },
                                      'parameters'  => { 'options'  => {},
                                                         'required' => { "auth" => [ "string", "unique string of text generated by MG-RAST for your account" ] },
                                                         'body'     => {} } },
                                    { 'name'        => "upload",
                                      'request'     => $self->cgi->url."/".$self->name,
                                      'description' => "receives user inbox data upload",
                                      'example'     => [ 'curl -X POST -H "auth: auth_key" -F "upload=@sequences.fastq" "'.$self->cgi->url."/".$self->name.'"',
                    			                         "upload file 'sequences.fastq' to user inbox, auth is required" ],
                                      'method'      => "POST",
                                      'type'        => "synchronous",
                                      'attributes'  => { 'id'        => [ 'string', "user id" ],
                                                         'user'      => [ 'string', "user name" ],
                                                         'status'    => [ 'string', "status message" ],
                                                         'timestamp' => [ 'string', "timestamp for return of this query" ]
                                                       },
                                      'parameters'  => { 'options'  => {},
                                                         'required' => { "auth" => [ "string", "unique string of text generated by MG-RAST for your account" ] },
                                                         'body'     => { "upload" => ["file", "file to upload to inbox"] } } },
                                    { 'name'        => "stats",
                                      'request'     => $self->cgi->url."/".$self->name,
                                      'description' => "runs sequence stats on file in user inbox",
                                      'example'     => [ 'curl -X POST -H "auth: auth_key" -F "inbox_file_id=XXXXXXXX-XXXX-XXXX-XXXXXXXXXXXX" -F "action=stats" -F "file_type=fasta" "'.$self->cgi->url."/".$self->name.'"',
                                                                 "runs action on file with given id in user inbox, auth is required" ],
                                      'method'      => "POST",
                                      'type'        => "asynchronous",
                                      'attributes'  => { 'id'        => [ 'string', "user login" ],
                                                         'status'    => [ 'string', "status message" ],
                                                         'timestamp' => [ 'string', "timestamp for return of this query" ]
                                                       },
                                      'parameters'  => { 'options'  => {
                                                             'action' => ['cv', [['stats', 'runs sequence stats on file with given id in user inbox']]],
                                                             'file_type' => ['cv', [['fasta', 'fasta format (default)'],
                                                                                    ['fastq', 'fastq format']]],
                                                                       },
                                                         'required' => { "auth" => [ "string", "unique string of text generated by MG-RAST for your account" ] },
                                                         'body'     => { "inbox_file_id" => ["string", "id of file in inbox on which to run sequence stats" ] } } }
                                     ]
                                 };

    $self->return_data($content);
}

# Override parent request function
sub request {
    my ($self) = @_;
    
    if ($self->user) {
        if ($self->method eq 'POST' && $self->cgi->param('upload')) {
            $self->upload_file();
        } elsif ($self->method eq 'POST' && $self->cgi->param('action') eq 'stats') {
            $self->stats();
        } elsif ($self->method eq 'GET') {
            $self->view_inbox();
        }
    }
    $self->info();
}

sub stats {
    my ($self) = @_;

    my $cgi = $self->cgi;
    my $input_file_id = $cgi->param('inbox_file_id');

    if ($input_file_id eq "") {
        $self->return_data( {"ERROR" => "this request type requires the inbox_file_id parameter"}, 400 );
    }

    if ($self->user) {
        # Get list of files in user's inbox
        my $files = {};
        my $inbox = $self->get_shock_query({'type' => 'inbox', 'id' => 'mgu'.$self->user->_id}, $self->mgrast_token);
        foreach my $node (@$inbox) {
            $files->{$node->{id}} = $node->{file}{name};
        }
        unless (exists $files->{$input_file_id}) {
            $self->return_data( {"ERROR" => "file id does not exist in your inbox"}, 404 );
        }

        my $file_type = "fasta";
        if ($cgi->param('file_type') eq "fastq") {
            $file_type = "fastq";
        }
        my $user_id = 'mgu'.$self->user->_id;
        # Do template replacement of MG-RAST's AWE workflow for sequence stats
        my $info = { shock_url => $Conf::shock_url,
                     job_name => $user_id.'_seqstats_'.$input_file_id,
                     file_type => $file_type,
                     user_id => $user_id,
                     clientgroups => $Conf::mgrast_inbox_clientgroups,
                     input_file_id => $input_file_id };
        my $tt = Template->new( ABSOLUTE => 1 );
        my $awf = '';
        $tt->process($Conf::mgrast_seq_stats_workflow, $info, \$awf) || die $tt->error();

        # Submit job to AWE and check for successful submission
        my $job = $self->post_awe_job($awf, $self->mgrast_token, $self->mgrast_token, 1);
        unless ($job && $job->{state} && $job->{state} == "init") {
            $self->return_data( {"ERROR" => "job could not be submitted"}, 500 );
        }

        $self->return_data({
            id        => 'mgu'.$self->user->_id,
            user      => $self->user->login,
            status    => "stats computation is being run on file id: $input_file_id",
            timestamp => strftime("%Y-%m-%dT%H:%M:%S", gmtime)
        });
    } else {
        $self->return_data( {"ERROR" => "this request type requires authentication"}, 401 );
    }
}

sub view_inbox {
    my ($self) = @_;

    my $files = [];
    my $inbox = $self->get_shock_query({'type' => 'inbox', 'id' => 'mgu'.$self->user->_id}, $self->mgrast_token);
    foreach my $node (@$inbox) {
        push @$files, { 'id'        => $node->{id},
                        'filename'  => $node->{file}{name},
                        'filesize'  => $node->{file}{size},
                        'checksum'  => $node->{file}{checksum}{md5},
                        'timestamp' => $node->{created_on} };
    }
    $self->return_data({
        id        => 'mgu'.$self->user->_id,
        user      => $self->user->login,
        timestamp => strftime("%Y-%m-%dT%H:%M:%S", gmtime),
        files     => $files,
        url       => $self->cgi->url."/".$self->name
    });
}

sub upload_file {
    my ($self) = @_;

    my $fn = $self->cgi->param('upload');
    if ($fn) {
        if ($fn !~ /^[\w\d_\.]+$/) {
            $self->return_data({"ERROR" => "Invalid parameters, filename allows only word, underscore, dot (.), and number characters"}, 400);
        }
        my $fh = $self->cgi->upload('upload');
        if (defined $fh) {
            # POST upload content to shock using file handle
            # data POST, not form
            my $response = undef;
            my $io_handle = $fh->handle;
            eval {
                my $post = HTTP::Request::StreamingUpload->new(
                    POST    => $Conf::shock_url.'/node',
                    fh      => $io_handle,
                    headers => HTTP::Headers->new(
                        'Content_Type' => 'application/octet-stream',
                        'Authorization' => 'OAuth '.$self->mgrast_token
                    )
                );
                my $req = LWP::UserAgent->new->request($post);
                $response = $self->json->decode( $req->content );
            };
            if ($@ || (! ref($response))) {
                $self->return_data({"ERROR" => "Unable to connect to Shock server"}, 507);
            } elsif (exists($response->{error}) && $response->{error}) {
                $self->return_data({"ERROR" => "Unable to POST to Shock: ".$response->{error}[0]}, $response->{status});
            }
            # PUT file name to node
            my $node_id = $response->{data}{id};
            my $node = $self->update_shock_node_file_name($node_id, "".$fn, $self->mgrast_token);
            unless ($node && ($node->{id} eq $node_id)) {
                $self->return_data({"ERROR" => "storing object failed - unable to set file name"}, 507);
            }
            my $attr = {
                type  => 'inbox',
                id    => 'mgu'.$self->user->_id,
                user  => $self->user->login,
                email => $self->user->email
            };
            # PUT attributes to node
            $node = $self->update_shock_node($node_id, $attr, $self->mgrast_token);
            # return info
            if ($node && ($node->{id} eq $node_id)) {
                $self->return_data({
                    id        => 'mgu'.$self->user->_id,
                    user      => $self->user->login,
                    status    => "data received successfully",
                    timestamp => strftime("%Y-%m-%dT%H:%M:%S", gmtime)
                });
            } else {
                $self->return_data({"ERROR" => "storing object failed - unable to update file with user info"}, 507);
            }
        } else {
            $self->return_data( {"ERROR" => "storing object failed - could not obtain filehandle"}, 507 );
        }
    } else {
        $self->return_data( {"ERROR" => "invalid parameters, requires filename and data"}, 400 );
    }
}

1;
