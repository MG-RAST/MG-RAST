package resources::inbox;

use strict;
use warnings;
no warnings('once');

use HTTP::Request::StreamingUpload;
use Data::Dumper;
use Conf;
use parent qw(resources::resource);

# Override parent constructor
sub new {
    my ($class, @args) = @_;

    # Call the constructor of the parent class
    my $self = $class->SUPER::new(@args);
    
    # Add name
    $self->{name} = "inbox";
    return $self;
}

# resource is called without any parameters
# this method must return a description of the resource
sub info {
    my ($self) = @_;
    my $content = { 'name' => $self->name,
                    'url' => $self->cgi->url."/".$self->name,
                    'description' => "inbox receives user inbox data upload, requires authentication, see http://blog.metagenomics.anl.gov/mg-rast-v3-2-faq/#api_submission for details",
                    'type' => 'object',
                    'documentation' => $self->cgi->url.'/api.html#'.$self->name,
                    'requests' => [ { 'name'        => "info",
                                      'request'     => $self->cgi->url."/".$self->name,
                                      'description' => "Returns description of parameters and attributes.",
                                      'method'      => "GET",
                                      'type'        => "synchronous",  
                                      'attributes'  => "self",
                                      'parameters'  => { 'options'  => {},
                                                         'required' => {},
                                                         'body'     => {} } },
                                    { 'name'        => "view",
                                      'request'     => $self->cgi->url."/".$self->name,
                                      'description' => "lists the contents of the user inbox",
                                      'example'     => [ 'curl -X GET -H "auth: auth_key" "'.$self->cgi->url."/".$self->name.'"',
                  			                             'lists the contents of the user inbox, auth is required' ],
                                      'method'      => "GET",
                                      'type'        => "synchronous",  
                                      'attributes'  => { 'id'        => [ 'string', "user id" ],
                                                         'login'     => [ 'string', "user login" ],
                                                         'timestamp' => [ 'string', "timestamp for return of this query" ],
                                                         'files'     => [ 'list', [ 'object', [ { 'filename'  => [ 'string', "path of file from within user inbox" ],
                                                                                                  'filesize'  => [ 'string', "disk size of file in bytes" ],
                                                                                                  'checksum'  => [ 'string', "md5 checksum of file"],
                                                                                                  'timestamp' => [ 'string', "timestamp of file" ]
                                                                                                 }, "list of file objects"] ] ],
                                                         'url'       => [ 'uri', "resource location of this object instance" ] },
                                      'parameters'  => { 'options'  => {},
                                                         'required' => { "auth" => [ "string", "unique string of text generated by MG-RAST for your account" ] },
                                                         'body'     => {} } },
                                    { 'name'        => "upload",
                                      'request'     => $self->cgi->url."/".$self->name,
                                      'description' => "receives user inbox data upload",
                                      'example'     => [ 'curl -X POST -H "auth: auth_key" -F "upload=@sequences.fastq" "'.$self->cgi->url."/".$self->name.'"',
                    			                         "upload file 'sequences.fastq' to user inbox, auth is required" ],
                                      'method'      => "POST",
                                      'type'        => "synchronous",
                                      'attributes'  => { 'id'        => [ 'string', "user id" ],
                                                         'login'     => [ 'string', "user login" ],
                                                         'status'    => [ 'string', "status message" ],
                                                         'timestamp' => [ 'string', "timestamp for return of this query" ]
                                                       },
                                      'parameters'  => { 'options'  => {},
                                                         'required' => {},
                                                         'body'     => { "auth" => [ "string", "unique string of text generated by MG-RAST for your account" ],
                                                                         "upload" => ["file", "file to upload to inbox"] } } }
                                     ]
                                 };

    $self->return_data($content);
}

# Override parent request function
sub request {
    my ($self) = @_;
    
    unless ($self->user) {
        $self->return_data( {"ERROR" => "this request type requires authentication"}, 401 );
    }
    if ($self->method eq 'POST') {
        $self->upload_file();
    } elsif ($self->method eq 'GET') {
        $self->view_inbox();
    } else {
        $self->info();
    }
}

sub view_inbox {
    my ($self) = @_;

    my $files = [];
    my $inbox = $self->get_shock_query({'type' => 'inbox', 'id' => 'mgu'.$self->user->_id}, $Conf::mgrast_shock_token);
    foreach my $node (@$mgdata) {
        push @$files, { 'filename'  => $node->{file}{name},
                        'filesize'  => $node->{file}{size},
                        'checksum'  => $node->{file}{checksum}{md5},
                        'timestamp' => $node->{created_on} };
    }
    $self->return_data( { 'id' => 'mgu'.$self->user->_id,
                          'login' => 'mgu'.$self->user->login,
                          'timestamp' => scalar localtime,
                          'files' => \@files,
                          'url' => $self->cgi->url."/".$self->name } );
}

sub upload_file {
    my ($self) = @_;

    my $fn = $self->cgi->param('upload');
    if ($fn) {
        if ($fn !~ /^[\w\d_\.]+$/) {
            $self->return_data({"ERROR" => "Invalid parameters, filename allows only word, underscore, dot (.), and number characters"}, 400);
        }
        my $fh = $self->cgi->upload('upload');
        if (defined $fh) {
            my $io_handle = $fh->handle;
            if (open FH, ">$udir/$fn") {
                my ($bytesread, $buffer);
                while ($bytesread = $io_handle->read($buffer,4096)) {
                    print FH $buffer;
                }
                close FH;
                $self->return_data( { 'id' => $self->user->login,
                                      'status' => "data received successfully",
                                      'timestamp' => scalar localtime } );
            } else {
                $self->return_data( {"ERROR" => "storing object failed - could not open target file"}, 507 );
            }
        } else {
            $self->return_data( {"ERROR" => "storing object failed - could not obtain filehandle"}, 507 );
        }
    } else {
        $self->return_data( {"ERROR" => "invalid parameters, requires filename and data"}, 400 );
    }
}

1;
