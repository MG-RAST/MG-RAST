use strict;
use warnings;
no warnings qw(redefine);

1;

# this class is AUTOGENERATED and will be AUTOMATICALLY REGENERATED
# all work done in this module will be LOST


package OntologyOnDemand::DataField;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		position => [ DB_SCALAR, undef, 0, undef ],
		name => [ DB_SCALAR, undef, 0, undef ],
		dataSet => [ DB_OBJECT, "OntologyOnDemand::DataSet", 0, undef ],
		type => [ DB_SCALAR, undef, 0, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "name", "type", "position", "dataSet" ],
		];
}

sub indices {
     return 
		[
			[ "type" ],
			[ "name" ],
			[ "dataSet" ],
		];
}

1;

package OntologyOnDemand::DataSet;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		ID => [ DB_SCALAR, undef, 0, undef ],
		name => [ DB_SCALAR, undef, 0, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "ID", "name" ],
		];
}

sub indices {
     return 
		[
			[ "ID" ],
		];
}

1;

package OntologyOnDemand::Entry;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		ID => [ DB_SCALAR, undef, 0, undef ],
		parent => [ DB_OBJECT, "OntologyOnDemand::Entry", 0, undef ],
		creator => [ DB_OBJECT, "WebServerBackend::User", 0, undef ],
		requestedData => [ DB_OBJECT, "OntologyOnDemand::DataSet", 0, undef ],
		name => [ DB_SCALAR, undef, 0, undef ],
		user_entry => [ DB_SCALAR, undef, 0, undef ],
		child => [ DB_ARRAY_OF_OBJECTS, "OntologyOnDemand::Entry", 0, undef ],
		definition => [ DB_SCALAR, undef, 0, undef ],
		editable => [ DB_SCALAR, undef, 0, undef ],
		category => [ DB_OBJECT, "OntologyOnDemand::Category", 0, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "ID", "name" ],
		];
}

sub indices {
     return 
		[
			[ "category" ],
		];
}

1;

package OntologyOnDemand::Category;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		ID => [ DB_SCALAR, undef, 0, undef ],
		url => [ DB_SCALAR, undef, 0, undef ],
		name => [ DB_SCALAR, undef, 0, undef ],
		extendable => [ DB_SCALAR, undef, 0, undef ],
		description => [ DB_SCALAR, undef, 0, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "ID" ],
		];
}

sub indices {
     return 
		[
		];
}

1;
