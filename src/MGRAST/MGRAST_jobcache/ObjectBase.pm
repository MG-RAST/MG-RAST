use strict;
use warnings;
no warnings qw(redefine);

1;

# this class is AUTOGENERATED and will be AUTOMATICALLY REGENERATED
# all work done in this module will be LOST


package MGRAST_jobcache::JobgroupJob;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		jobgroup => [ DB_OBJECT, "MGRAST_jobcache::Jobgroup", 1, undef ],
		job => [ DB_OBJECT, "MGRAST_jobcache::Job", 1, undef ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
		];
}

1;

package MGRAST_jobcache::Jobgroup;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		name => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
		];
}

1;

package MGRAST_jobcache::Job;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		server_version => [ DB_SCALAR, undef, 0, undef ],
		genome_bp_count => [ DB_SCALAR, undef, 0, undef ],
		length_filter => [ DB_SCALAR, undef, 0, undef ],
		ambig_max_count => [ DB_SCALAR, undef, 0, undef ],
		size => [ DB_SCALAR, undef, 0, undef ],
		length_filter_max => [ DB_SCALAR, undef, 0, undef ],
		average_length => [ DB_SCALAR, undef, 0, undef ],
		created_on => [ DB_SCALAR, undef, 0, undef ],
		public => [ DB_SCALAR, undef, 0, undef ],
		id => [ DB_SCALAR, undef, 1, undef ],
		contaminate_filter_org => [ DB_SCALAR, undef, 0, undef ],
		rna_only => [ DB_SCALAR, undef, 0, undef ],
		project_name => [ DB_SCALAR, undef, 0, undef ],
		ambig_filter => [ DB_SCALAR, undef, 0, undef ],
		owner => [ DB_OBJECT, "WebServerBackend::User", 0, undef ],
		viewable => [ DB_SCALAR, undef, 0, undef ],
		last_modified => [ DB_SCALAR, undef, 0, undef ],
		active => [ DB_SCALAR, undef, 0, undef ],
		standard_deviation => [ DB_SCALAR, undef, 0, undef ],
		length_filter_min => [ DB_SCALAR, undef, 0, undef ],
		genome_name => [ DB_SCALAR, undef, 0, undef ],
		dereplicate => [ DB_SCALAR, undef, 0, undef ],
		type => [ DB_SCALAR, undef, 0, undef ],
		genome_id => [ DB_SCALAR, undef, 0, undef ],
		genome_contig_count => [ DB_SCALAR, undef, 0, undef ],
		contaminate_filter => [ DB_SCALAR, undef, 0, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "id" ],
			[ "genome_id" ],
		];
}

sub indices {
     return 
		[
			[ "owner" ],
			[ "viewable" ],
		];
}

1;

package MGRAST_jobcache::ProjectJob;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		project => [ DB_OBJECT, "MGRAST_jobcache::Project", 1, undef ],
		job => [ DB_OBJECT, "MGRAST_jobcache::Job", 1, undef ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
		];
}

1;

package MGRAST_jobcache::Status;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		stage => [ DB_SCALAR, undef, 1, undef ],
		status => [ DB_SCALAR, undef, 1, undef ],
		job => [ DB_OBJECT, "MGRAST_jobcache::Job", 1, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "job", "stage" ],
		];
}

sub indices {
     return 
		[
			[ "job" ],
		];
}

1;

package MGRAST_jobcache::Import;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		priority => [ DB_SCALAR, undef, 0, undef ],
		status => [ DB_SCALAR, undef, 0, undef ],
		action => [ DB_SCALAR, undef, 0, undef ],
		reason => [ DB_SCALAR, undef, 0, undef ],
		suggested_by => [ DB_SCALAR, undef, 0, undef ],
		replaces => [ DB_SCALAR, undef, 0, undef ],
		job => [ DB_OBJECT, "MGRAST_jobcache::Job", 1, undef ],
	};
}

sub unique_indices {
     return 
		[
			[ "job" ],
		];
}

sub indices {
     return 
		[
			[ "suggested_by" ],
			[ "priority" ],
			[ "reason" ],
			[ "status" ],
		];
}

1;

package MGRAST_jobcache::Project;

use DBObject;
use base qw(DBObject);

sub attributes {
     return {
		public => [ DB_SCALAR, undef, 0, undef ],
		name => [ DB_SCALAR, undef, 1, undef ],
		type => [ DB_SCALAR, undef, 0, undef ],
		id => [ DB_SCALAR, undef, 1, undef ],
	};
}

sub unique_indices {
     return 
		[
		];
}

sub indices {
     return 
		[
		];
}

1;
